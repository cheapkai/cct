Bash Shell

cd.c

#include <stdio.h>
#include <unistd.h>
#include <string.h>

int cd(char **argarr, int cnt, char * home)
{
  char directory[1005];

  if(cnt<=1)
  {
    chdir(home);
    return 1;
  }

  strcpy(directory,argarr[1]);

  if(directory[0]=='~')
  {
  	int i;
	char temp[1005];

    for(i=1; directory[i]!='\0'; i++) temp[i-1]=directory[i];

    int appendlen=i-1;

    for(i=0;home[i]!='\0';i++)
    {
      directory[i]=home[i];
    }

    int homelen = i;

    for(i=0;i<appendlen;i++)
    {
      directory[homelen+i]=temp[i];
    }

    directory[homelen+appendlen]='\0';
  } 

  if(directory[0]!='\0')
  {
    if(chdir(directory)!=0)
    {
      char errstring[1005];
      strcpy(errstring, "bash: cd: ");
	  strcat(errstring, directory);
      perror(errstring);
    }
  }
  return 1;
}


echo.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int echo(char **argarr,int cnt) 
{
  if(cnt<=1) {
    printf("\n");
    return 1;
  }
  for (int i = 1; i < cnt; i++)
  {
  	if(argarr[i][0]=='$')
  	{
  		const char* s = getenv(argarr[i]+1);
  		if(s!=NULL) printf("%s ",s);
  	}
  	else
  	{
	    int j;
	    for(j=0;argarr[i][j]!='\0';j++)
	    {
	      if(argarr[i][j]!='"') printf("%c",argarr[i][j]);
	    }

        printf(" ");
	}
  }
    printf("\n");
  return 1;
}

envvar.c

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/wait.h>

void unsetenvv(char **argarr,int cnt){

  if(cnt==1)
  {
    printf("Arguments expected: >= 1 , given: 0");
  }
  else
  {
   // printf("%s\n",argarr[1]);
    unsetenv(argarr[1]);
  }
  return;
}
void setenvv(char **argarr, int cnt)
{
  if(cnt==0)
  {
    printf("Arguments expected: {1,2} , given: 0");
  }
  else if(cnt>3)
  {
    printf("Too many arguments");
  }
  else
  {
    if(cnt==2)
    {
      setenv(argarr[1] , " " , 2);
    }
    else
    {
      setenv(argarr[1] , argarr[2] , 2);
    }
  }
  return;
}

execute.c

#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include "headers.h"

typedef struct 
{
  int id;
  char name[100];
} Proc;

extern int proc_count;

extern Proc proc_arr[100];


int execute(char ** argarr, int type, int cnt, char* home, int homepathlen)
{
  if(cnt==0) return 0;

  if(strcmp(*argarr, "quit") == 0)
  {
    exit(0);
  }

  int status;
  pid_t pid, wpid;

  pid = fork();

  if (pid == 0)
  {
    if(argarr[0][0]!='\0')
    {
    int inflag=0, outcount=0, appendcount=0;
    char inpfile[64], outputfile[16][64], appendfile[16][64];
    int fd;

    int i;
    for(i=0;argarr[i]!='\0';i++)
    {
      if(strcmp(argarr[i],"<")==0)
      {        
        argarr[i]=NULL;
        strcpy(inpfile,argarr[i+1]);
        inflag=1;           
      }
      else if(strcmp(argarr[i],">")==0)
      {      
        argarr[i]=NULL;
        strcpy(outputfile[outcount++],argarr[i+1]);
      }         
      else if(strcmp(argarr[i],">>")==0)
      {      
        argarr[i]=NULL;
        strcpy(appendfile[appendcount++],argarr[i+1]);
      }  
    }

    if(inflag!=0)
    { 
      fd = open(inpfile, O_RDONLY, 0);
      if(fd<0) perror("Error opening input file");
      if(dup2(fd,0) < 0) ("Error - input duping");
      close(fd);
    }

    for (i = 0; i < outcount; ++i)
    {
      fd = open(outputfile[i], O_WRONLY | O_TRUNC | O_CREAT ,0644);
      if(fd<0) perror("Error opening output file");
      if(dup2(fd,STDOUT_FILENO)<0) perror("Error - output duping");
      close(fd);
    }

    for (i = 0; i < appendcount; ++i)
    {
      fd = open(appendfile[i], O_WRONLY | O_APPEND | O_CREAT, 0644);
      if(fd<0) perror("Error opening the output(append) file");
      if(dup2(fd,STDOUT_FILENO)<0) perror("Error - output(append) duping");
      close(fd);
    }
 
    if(strcmp(*argarr, "pwd") == 0)
    {
      pwd();
    }
    else if(strcmp(*argarr, "cd") == 0)
    {
      cd(argarr,cnt,home);
    }
    else if(strcmp(*argarr, "echo") == 0)
    {
      echo(argarr,cnt);
    }
    else if(strcmp(*argarr, "unsetenv")==0)
    {
      unsetenvv(argarr,cnt);
    }
    else if(strcmp(*argarr, "pinfo") == 0)
    {
      pinfo(argarr,cnt,home,homepathlen);
    }
    else if(strcmp(*argarr, "ls") == 0)
    {
      ls(argarr,cnt);
    }
    else if(strcmp(*argarr, "setenv") == 0)
    {
      setenvv(argarr,cnt);
    }
    else if(strcmp(*argarr, "jobs") == 0)
    {
      jobs();
    }
    else if(strcmp(*argarr, "kjob") == 0)
    {
      kjob(argarr,cnt);
    }
    else if(strcmp(*argarr, "overkill") == 0)
    {
      overkill();
    }
    else
    {
      if(execvp(argarr[0], argarr) == -1)
      {
        printf("%s: command not found\n",argarr[0]);
      }
    }
    //printf("execution complete\n");
    }
    
    exit(EXIT_FAILURE);
  }

  else if (pid < 0) 
  {
    perror("Error");
  } 

  else
  {

    if(type==0)
    {
      do
      {
        wpid = waitpid(pid, &status, WUNTRACED);
      }
      while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }

    else
    {
      //background process is stored into the array
      proc_count++; //note that proc_arr is 1 indexed
      proc_arr[proc_count].id = (int) pid;
      strcpy(proc_arr[proc_count].name,argarr[0]);
    }

  }

  return 0;
}

headers.h

char *readline();
int parse(char *ip, char *args[],int *type);
char** split_commands(char* ip, char delim);
int cd(char **argarr, int cnt, char * home);
int echo(char **argarr,int cnt);
int pwd();
void pinfo(char **argarr, int cnt, char *home, int homepathlength);
void ls(char **argarr,int cnt);
int execute(char ** argarr, int type, int cnt, char* home, int homepathlen);
void unsetenvv(char ** argarr,int cnt);
void setenvv(char **argarr, int cnt);
void jobs();
void overkill();
void kjob(char ** argarr, int cnt);

input.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

char *readline()
{
  char *buffer;
  size_t bufsize = 0; //getline() allocates a buffer for us
  getline(&buffer, &bufsize, stdin);
  return buffer;
}

int parse(char *ip, char *args[],int *type)
{
    int count = 0;
    char *pointer = ip;
    while(*pointer != '\0')   {
      if(*pointer!=' ' && *pointer!='&')
    { 
      *args = pointer;
      count++;
      args++;
    }
      while(*pointer != ' ' && *pointer != '\t' && *pointer != '\0' && *pointer != '\n')
      {
        if (*pointer == '&') *type = 44;
        pointer++;
      }
      while(*pointer == ' ' || *pointer == '\t' || *pointer == '\n')
      {
        *pointer = '\0';
        pointer++;
      }
    }
    *args = '\0';
    return count;
}

char** split_commands(char* ip, char delim)
{
    char* temp=(char*)malloc((1001)*sizeof(char));
    strcpy(temp,ip);
    char **tokens = malloc(100 * sizeof(char*));
    char *tmp;
    int i=0;
    tmp = strtok(temp, &delim);
    while (tmp != NULL) 
    {
      tokens[i] = tmp;
      i++;
      tmp = strtok(NULL,&delim);
    }
    tokens[i] = NULL;
    return tokens;
}

jobs.c

#include <stdio.h>

typedef struct 
{
  int id;
  char name[100];
} Proc;

extern int proc_count;

extern Proc proc_arr[100];

void jobs()
{
	int i;
	for(i=1;i<=proc_count;i++)
	{
	  printf("[%d] %s %d\n", i, proc_arr[i].name, proc_arr[i].id);
	}
}

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>


int power(int a, int b)
{
	int x = 1;
	int i;
	for (i = 0; i < b; ++i)
	{
		x*=a;
	}

	return x;
}


typedef struct{
	int id;
	char name[100];
} Proc;

extern int proc_count;

extern Proc proc_arr[100];

void kjob(char ** argarr, int cnt)
{
	if(cnt <= 2)
	{
		printf("Too few arguments!\n");
	}

	else if (cnt > 3)
	{
		printf("Too many arguments\n");
	}

	else
	{
		int job_id=0;
		for(int i=0;i<strlen(argarr[1]);i++)
		{
			job_id += (argarr[1][i]-'0')*power(10,i);
		}

		int sigval=0;
		for(int i=0;i<strlen(argarr[2]);i++)
		{
			sigval += (argarr[2][i]-'0')*power(10,i);
		}

		kill(proc_arr[job_id].id, sigval);
	}

	return;
}

ls.c

#include <sys/types.h>
#include <sys/dir.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>

void ls(char **argarr,int cnt)
{

	void longlist(char *directory, char *filename)
	{
		char path[200];
		strcpy(path,directory);
		strcat(path,"/");
		strcat(path,filename);

		struct stat fileStat;

		if(stat(path,&fileStat)<0)
		{
			perror("Error");
			return;
		}

		struct passwd * uname = getpwuid(fileStat.st_uid);
		struct group * ugroup = getgrgid(fileStat.st_gid);

		struct tm * time = localtime(&fileStat.st_mtime);

		printf( (S_ISDIR(fileStat.st_mode)) ? "d" : "-");
	    printf( (fileStat.st_mode & S_IRUSR) ? "r" : "-");
	    printf( (fileStat.st_mode & S_IWUSR) ? "w" : "-");
	    printf( (fileStat.st_mode & S_IXUSR) ? "x" : "-");
	    printf( (fileStat.st_mode & S_IRGRP) ? "r" : "-");
	    printf( (fileStat.st_mode & S_IWGRP) ? "w" : "-");
	    printf( (fileStat.st_mode & S_IXGRP) ? "x" : "-");
	    printf( (fileStat.st_mode & S_IROTH) ? "r" : "-");
	    printf( (fileStat.st_mode & S_IWOTH) ? "w" : "-");
	    printf( (fileStat.st_mode & S_IXOTH) ? "x" : "-");

	    printf(" %2lu", fileStat.st_nlink);

	    printf(" %s", uname->pw_name);
	    printf(" %s", ugroup->gr_name);

	    printf(" %5ld",fileStat.st_size);

		char string[100];
		strftime(string,10,"%b",time);

	   	printf(" %4d %s %2d",time->tm_year + 1900, string, time->tm_mday);
		printf(" %02d:%02d",time->tm_hour, time->tm_min);
	    
	    if (S_ISDIR(fileStat.st_mode)) printf(" %s%s%s\n", "\x1B[1;34m", filename, "\x1B[0m");
	    else if (fileStat.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) printf(" %s%s%s\n", "\x1B[1;32m", filename, "\x1B[0m");
	    else printf(" %s\n", filename);
	}

	int lflag = 0;
	int aflag = 0;

	int dirs[1000];
	int dircount=0;

	int i,j;
	for(i=1; i<cnt; i++)
	{
		if(argarr[i][0]=='-')
		{
			if(strcmp(argarr[i],"-l")==0) lflag=1; 
			else if(strcmp(argarr[i],"-a")==0) aflag=1;
			else if(strcmp(argarr[i],"-la")==0 || strcmp(argarr[i],"-al")==0)
			{
				aflag=1;
				lflag=1;
			}
		}

		else
		{
			dirs[dircount++]=i;
		}
	}

 	int hide(const struct dirent *name)
	{
    	if(name->d_name[0] == '.') return 0;
    	else return 1;
	}

	int namecmp(const char *s1, const char *s2)
	{
		if(s1[0]=='.') s1++;
		if(s2[0]=='.') s2++;

		return strcmp(s1,s2);
	}

	int hiddensort(const struct dirent **name1, const struct dirent **name2)
	{
		return namecmp((*name1)->d_name, (*name2)->d_name);
	}

	int noarg=0;

	if(dircount==0)
	{
		argarr[cnt] = malloc(2*sizeof(char));
		argarr[cnt][0]='.';
		argarr[cnt][1]='\0';
		dirs[dircount++]=cnt;
		cnt++;
		noarg=1;
	}

	for(i=0;i<dircount;i++)
	{
		char directory[1005];
		strcpy(directory,argarr[dirs[i]]);

		struct dirent **namelist;
		int ret;
		if(aflag) ret = scandir(directory, &namelist, NULL, hiddensort);
		else ret = scandir(directory, &namelist, hide, alphasort);

		if(ret<0) perror("Error");
		else
		{
			printf("%s:\n",directory);
			if (lflag==0)
			{
				for(j=0;j<ret;j++)
				{
					char filename[100];
					strcpy(filename,namelist[j]->d_name);

					char path[200];
					strcpy(path,directory);
					strcat(path,"/");
					strcat(path,filename);

					struct stat fileStat;

					if(stat(path,&fileStat)<0)
					{
						perror("Error");
						continue;
					}

				    if (S_ISDIR(fileStat.st_mode)) printf("%s%s%s  ", "\x1B[1;34m", filename, "\x1B[0m");
					else if (fileStat.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)) printf("%s%s%s  ", "\x1B[1;32m", filename, "\x1B[0m");
					else printf("%s  ", filename);
				}
			}

			else
			{
				for(j=0;j<ret;j++)
				{
					char filename[100];
					strcpy(filename,namelist[j]->d_name);
					longlist(directory,filename);
				}
			}

			if(lflag==0) printf("\n");
			if(i<dircount-1) printf("\n");

			free(namelist[i]);
		}
	}

	if(noarg) free(argarr[cnt-1]);

}

main.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <errno.h>
#include <signal.h>
#include "headers.h"

typedef struct 
{
  int id;
  char name[100];
} Proc;

int proc_count;

Proc proc_arr[100];

void getprompt()
  {
    char a[200],*user;
    user=getenv("LOGNAME");
    gethostname(a,200);
    char *c,fi[100];
    c=getcwd(NULL,0);

    fprintf(stderr,"<%s%s@%s%s:%s%s%s>","\x1B[1;34m",user,a,"\x1B[0m","\x1B[1;32m",c,"\x1B[0m");
    return;

  }
 void sig_handler(int signo)
  {
    if(signo==SIGINT)
    {
      fprintf(stderr,"\n");
      getprompt();
    }

  }
 
void loop()
{
  char home[1005]; //contains the home directory (where the shell originates)
  getcwd(home,1000);
  int homepathlen=strlen(home);
  
   signal (SIGINT, SIG_IGN);
    signal (SIGQUIT, SIG_IGN);
    signal (SIGTSTP, SIG_IGN);
  while(1)
  {
    int i;

    int stat;
    while(waitpid(-1, &stat, WNOHANG) > 0);

    Proc temp[100];
    int tempcount=0;

    for(i=1;i<=proc_count;i++)
    {
      int a;
      if(a = kill(proc_arr[i].id,0)==-1 && errno==ESRCH)
      {
        printf("Process %s exited whose id is %d\n",proc_arr[i].name,proc_arr[i].id);
      }
      else
      { 
        //printf("a is %d\n", a);
        tempcount++;
        temp[tempcount]=proc_arr[i];
      }
    }

    proc_count = tempcount;
    for(i=1;i<=proc_count;i++)
    {
      proc_arr[i]=temp[i];
    }


    // Gets the current directory
   
    char presentdir[1005] = {'\0'};
    getcwd(presentdir,1000);

    int pwdlen=strlen(presentdir);
    int flag=0;
    char path[1005];

    // This code is to check if the directory which we are in right now is ahead of the directory in which shell is there or not.
    for(i=0;i<homepathlen;i++)
    {
      if(presentdir[i]!=home[i])
      {
      	flag=1;
      	break;
      }
    }

    if(flag==0)
    {
      //Copy the path ahead of the directory the shell is located in as shell's directory is supposed to be the home directory/
      for(i=homepathlen;i<=pwdlen;i++) path[i-homepathlen+1]=presentdir[i];
      path[0]='~';
    }

    else
    {
      //Specify the absolute path if the pwd is no ahead of the directory in which shell is there.
      for(i=0;i<=pwdlen;i++) path[i]=presentdir[i];
    } 
  
    char *username=getenv("USER"); //For display purpose, gets the valueof user environment variable
    char host[105];
    gethostname(host,100);
    printf("<%s%s@%s%s:%s%s%s>","\x1B[1;34m",username,host,"\x1B[0m","\x1B[1;32m",path,"\x1B[0m"); //Prompt printing

    char * line = readline();

    // Separates multiple command seperated by ";"
    char ** commands=split_commands(line,';');

    for(i=0; commands[i]!=NULL; i++)
    {
      if(strcmp(*(commands + i),"quit")==0)
      {
        printf("a\n");
        exit(0);
      }
      int type=0;
      int parr[2];
      int pflag=0;
      int fd=0;
      int j;
      pid_t newproc;
      char **pipecommand=split_commands(commands[i],'|');
      if(pipecommand[1]!=NULL) pflag=1;
      if(pflag==1)
      {

        for(j=0;pipecommand[j]!=NULL;j++)
        {
            char *argarr[40];      // Parses it which means splits the commands into arguments, argarr is the array of arguments, type is for foreground or background processes
            int cnt = parse(pipecommand[j],argarr,&type); // cnt is the number of arguments
            pipe(parr);
            newproc=fork();
            if(newproc==0)
            {
              dup2(fd , 0);
              if(pipecommand[j+1]!=NULL) dup2(parr[1],1);
              close(parr[0]);
              execute(argarr,type,cnt,home,homepathlen);
              exit(2);
            }
            else
            {

                  wait(NULL);
                  close(parr[1]);
                  fd = parr[0];
                  i++;
            }
        }
      }
      else{
      char *argarr[40];      // Parses it which means splits the commands into arguments, argarr is the array of arguments, type is for foreground or background processes
      
      int cnt = parse(commands[i],argarr,&type); // cnt is the number of arguments
      // Checks what the the command is, *argarr points to the first element in the argument array
      execute(argarr,type,cnt,home,homepathlen);
    }
    }



  }
}
int main()
{
  // Calls the infinite loop
  loop();
  return 0;
}

makefile

TARGETS = myShell

all: $(TARGETS)

%o: %.c
        gcc -g -c -o  $@ $<
myShell: input.o cd.o echo.o pwd.o pinfo.o ls.o execute.o main.o envvar.o jobs.o kjob.o overkill.o
        gcc -o myShell input.o cd.o echo.o pwd.o pinfo.o ls.o execute.o main.o envvar.o jobs.o kjob.o overkill.o

.PHONY: clean
clean:
        rm -f $(TARGETS) *.o


overkill.c

#include <sys/types.h>
#include <signal.h>
#include <stdio.h>

typedef struct{
	int id;
	char name[100];
} Proc;

extern int proc_count;

extern Proc proc_arr[100];

void overkill()
{	
	for(int i=1;i<=proc_count;i++)
	{	
		kill(proc_arr[i].id,SIGKILL);
	}

}

pinfo.c

#include <stdio.h>
#include <unistd.h>
#include <string.h>

void pinfo(char **argarr, int cnt, char *home, int homepathlength)
{
  char stat1[1000];
  char exec1[1000];
  if(cnt>1)
  {
    strcpy(stat1,"/proc/");
    strcat(stat1,argarr[1]);
    strcat(stat1,"/stat");
    strcpy(exec1,"/proc/");
    strcat(exec1,argarr[1]);
    strcat(exec1,"/exe");
  }
  else
  {
    sprintf(stat1,"/proc/%d/stat",getpid());      
    sprintf(exec1,"/proc/%d/exe",getpid());
  } 

  FILE *fp;
  if((fp=fopen(stat1,"r"))==NULL)
  {
    printf("Error: process doesn't exist\n");
  }
  else
  {
    char execname[1000];
    int pid;
    char runstatus;
    long unsigned int mem; 
    fscanf(fp,"%d %*s %c %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %lu %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d %*d",&pid,&runstatus,&mem);                       
    fclose(fp);
    printf("Process ID -- %d\n",pid);
    printf("Process Status -- %c\n",runstatus);
    printf("Memory -- %lu\n",mem);

    int a = readlink(exec1,execname,256);
    execname[a]='\0';


    if(a>=homepathlength)
    {
      int inhome=1;
      int i;
      for(i=0; i<homepathlength; i++)
      {
        if (execname[i]!=home[i])
        {
          inhome=0;
          break;
        }
      }

      if(inhome)
      {
        char final[1000];
        final[0]='~';
        for(i=homepathlength; i<a; i++)
        {
          final[i-homepathlength+1] = execname[i];
        }
        final[i-homepathlength+1]='\0';
        strcpy(execname,final);
      }
 
    }

    printf("Executable Path -- %s\n",execname);
  }  
}


pwd.c

#include <stdio.h>
#include <unistd.h>

int pwd()
{
  char pwdir[10001];
  getcwd(pwdir,sizeof(pwdir));
  printf("%s\n",pwdir);
  return 1;
}

README.md

## RUNNING

- run "make"

- execute by using "./myShell"

- type "quit" to exit the shell

## FEATURES

#### ls command
###### Usage:
- ls takes arguments as flags (in the form -(flagname)) and directories (in the form -(directory name)) in any order.
- It lists the files of all the directories mentioned, in the form of option selected by the flags.
- If there is no directory mentioned, it lists the files of current directory

* "ls" - lists in alphabetical order
* "ls -a" - display hidden files
* "ls -l" - long list
* "ls -al"/"ls -la"/"ls -l -a"/"ls -a -l" - long list including hidden files

- Similarities to real command: "ls -a" displays files sorted in alphabetical order (NOT CONSIDERING THE PREPENDED '.')  

#### cd command
* "cd (absolute path)" - goes to absolute path
* "cd" - goes to ~/
* "cd ~/(pathname)" - goes to ~/(pathname)
* "cd .." - goes to previous directory
* "cd ." - goes to same directory

#### echo command
* "echo" - prints empty line
* "echo text" - prints "text"
* "echo 'text' " - prints "text"
* "echo $var" - prints value of linux environment variable "var"

#### pwd command
* "pwd" - prints absolute path of present working directory

#### pinfo command
* "pinfo" : prints the process related info of the shell program 
* "pinfo <pid>" : prints the process info about given pid
- pid -- 
- Process status -- {R/S/S+/Z}
- Memory
- Executable path -- (Absolute path - includes ~/ if executable is present inside the shell directory)







